// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users

model Developer {
  id                String     @id @default(cuid())
  role              String
  email             String     @unique
  username          String     @unique
  password          String
  firstName         String
  lastName          String
  picture           String?
  about             String?
  excerpt           String?
  website           String?
  twitter           String?
  discord           String?
  github            String?
  instagram         String?
  chats             Chat[]
  jobs              Job[]
  skills            Skill[]
  types             Type[]
  rate              Rate?      @relation(fields: [rateId], references: [id])
  rateId            String?
  budget           Budget?        @relation(fields: [budgetId], references: [id])
  budgetId         Int?
  minSalary         MinSalary? @relation(fields: [minSalaryId], references: [id])
  minSalaryId       Int?
  maxSalary         MaxSalary? @relation(fields: [maxSalaryId], references: [id])
  maxSalaryId       Int?
  availability              Availability?      @relation(fields: [availabilityId], references: [id])
  availabilityId            Int?
  shift             Shift?     @relation(fields: [shiftId], references: [id])
  shiftId           Int?
  position          Position?  @relation(fields: [positionId], references: [id])
  positionId        Int?
  location          Location?  @relation(fields: [locationId], references: [id])
  locationId        Int?
  timezone          Timezone?  @relation(fields: [timezoneId], references: [id])
  timezoneId        Int?
  hours             Hours?     @relation(fields: [hoursId], references: [id])
  hoursId           Int?
  seniority         Seniority? @relation(fields: [seniorityId], references: [id])
  seniorityId       Int?
  industry          Industry?  @relation(fields: [industryId], references: [id])
  industryId        Int?
  profileCompletion Int
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Company {
  id         String    @id @default(cuid())
  role       String
  email      String    @unique
  username   String    @unique
  password   String
  name       String
  tagline    String?
  about      String?
  excerpt    String?
  website    String?
  twitter    String?
  discord    String?
  github     String?
  instagram  String?
  facebook   String?
  linkedin   String?
  logo       String?
  size       Size?     @relation(fields: [sizeId], references: [id])
  sizeId     Int?
  jobs       Job[]
  chats      Chat[]
  managers   Manager[]
  location   Location? @relation(fields: [locationId], references: [name])
  locationId String?
  industry   Industry? @relation(fields: [industryId], references: [name])
  industryId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Manager {
  id        String   @id @default(cuid())
  role      String
  email     String   @unique
  username  String   @unique
  password  String
  firstName String
  lastName  String
  picture   String?
  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
  jobs      Job[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Jobs

model Job {
  id             String       @id @default(cuid())
  title          String?
  description    String?
  employmentType String?
  international  Boolean?
  remote         Boolean?
  requirements   String[]
  contactEmail   String?
  applicants     Developer[]
  company        Company?     @relation(fields: [companyId], references: [id])
  companyId      String?
  manager        Manager?     @relation(fields: [managerId], references: [id])
  managerId      String?
  chats          Chat[]
  skills         Skill[]
  type           Type?        @relation(fields: [typeId], references: [id])
  typeId         Int?
  budget           Budget?        @relation(fields: [budgetId], references: [id])
  budgetId         Int?
  rate           Rate?        @relation(fields: [rateId], references: [id])
  rateId         String?
  minSalary      MinSalary?   @relation(fields: [minSalaryId], references: [id])
  minSalaryId    Int?
  maxSalary      MaxSalary?   @relation(fields: [maxSalaryId], references: [id])
  maxSalaryId    Int?
  availability              Availability?      @relation(fields: [availabilityId], references: [id])
  availabilityId            Int?
  shift          Shift?       @relation(fields: [shiftId], references: [id])
  shiftId        Int?
  position       Position?    @relation(fields: [positionId], references: [id])
  positionId     Int?
  location       Location?    @relation(fields: [locationId], references: [id])
  locationId     Int?
  timezone       Timezone?    @relation(fields: [timezoneId], references: [id])
  timezoneId     Int?
  hours          Hours?       @relation(fields: [hoursId], references: [id])
  hoursId        Int?
  seniority      Seniority?   @relation(fields: [seniorityId], references: [id])
  seniorityId    Int?
  industry       Industry?    @relation(fields: [industryId], references: [id])
  industryId     Int?
  impressions    Impression[]
  status         JobStatus?   @relation(fields: [statusId], references: [id])
  statusId       Int?
  published      Boolean?     @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Impression {
  id    Int      @id @default(autoincrement())
  date  DateTime @default(now())
  job   Job      @relation(fields: [jobId], references: [id])
  jobId String
}

model JobStatus {
  id   Int    @id @default(autoincrement())
  name String
  jobs Job[]
}

model Type {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  jobs       Job[]
  developers Developer[]
}

model Budget {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  jobs       Job[]
  developers Developer[]
}

model Location {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  jobs       Job[]
  developers Developer[]
  companies  Company[]
}

model Skill {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  jobs       Job[]
  developers Developer[]
}

model Size {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  companies Company[]
}

model Position {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  jobs       Job[]
  developers Developer[]
}

model Industry {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  jobs       Job[]
  developers Developer[]
  companies  Company[]
}

model MinSalary {
  id         Int         @id @default(autoincrement())
  name       String
  value      Int
  jobs       Job[]
  developers Developer[]
}

model MaxSalary {
  id         Int         @id @default(autoincrement())
  name       String
  value      Int
  jobs       Job[]
  developers Developer[]
}

model Seniority {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  jobs       Job[]
  developers Developer[]
}

model Rate {
  id         String       @id @default(cuid())
  name       String      
  fixed      Int
  from       Int
  to         Int
  type       String
  jobs       Job[]
  developers Developer[]
}


model Hours {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  range      String
  jobs       Job[]
  developers Developer[]
}

model Availability {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  range      String
  jobs       Job[]
  developers Developer[]
}



model Shift {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  from       String
  to         String
  jobs       Job[]
  developers Developer[]
}

model Timezone {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  value      Int
  jobs       Job[]
  developers Developer[]
}

// Chat

model Chat {
  id         String      @id @unique @default(cuid())
  name       String
  job        String?
  job_rel    Job?        @relation(fields: [job], references: [id])
  messages   Message[]
  developers Developer[]
  companies  Company[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String
  userId    Int
  sender    String
  receiver  String
  read      Boolean  @default(false)
  chatId    String?
  chat      Chat?    @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
